In C programming, a struct (or structure) is a collection of variables (can be of different types) under a single name.

| struct Person
  {
      char name[50];
      int citNo;
      float salary;
  };

  int main()
  {
      struct Person person1, person2, p[20];
      return 0;
  }

or

  struct Person
  {
      char name[50];
      int citNo;
      float salary;
  } person1, person2, p[20];



| // Program to add two distances (feet-inch)
  #include <stdio.h>
  struct Distance
  {
      int feet;
      float inch;
  } dist1, dist2, sum;

  int main()
  {
      printf("1st distance\n");
      printf("Enter feet: ");
      scanf("%d", &dist1.feet);

      printf("Enter inch: ");
      scanf("%f", &dist1.inch);
      printf("2nd distance\n");

      printf("Enter feet: ");
      scanf("%d", &dist2.feet);

      printf("Enter inch: ");
      scanf("%f", &dist2.inch);

      // adding feet
      sum.feet = dist1.feet + dist2.feet;
      // adding inches
      sum.inch = dist1.inch + dist2.inch;

      // changing to feet if inch is greater than 12
      while (sum.inch >= 12) 
      {
          ++sum.feet;
          sum.inch = sum.inch - 12;
      }

      printf("Sum of distances = %d\'-%.1f\"", sum.feet, sum.inch);
      return 0;
  }


| This code
    struct Distance{
        int feet;
        float inch;
    };

    int main() {
        struct Distance d1, d2;
    }
    
is equivalent to

    typedef struct Distance{
        int feet;
        float inch;
    } distances;

    int main() {
        distances d1, d2;
    }
    

|Access members using Pointer
  #include <stdio.h>
  struct person
  {
     int age;
     float weight;
  };

  int main()
  {
      struct person *personPtr, person1;
      personPtr = &person1;   

      printf("Enter age: ");
      scanf("%d", &personPtr->age);

      printf("Enter weight: ");
      scanf("%f", &personPtr->weight);

      printf("Displaying:\n");
      printf("Age: %d\n", personPtr->age);
      printf("weight: %f", personPtr->weight);

      return 0;
  }
  
  
